# Copyright (c) 2022 The Choclo Developers.
# Distributed under the terms of the BSD 3-Clause License.
# SPDX-License-Identifier: BSD-3-Clause
#
# This code is part of the Fatiando a Terra project (https://www.fatiando.org)
#
"""
Kernel functions for rectangular prisms
"""
import numpy as np
from numba import jit


@jit(nopython=True)
def prism_kernel_evaluation(easting, northing, upward, prism, kernel):
    r"""
    Evaluate a numerical kernel on every vertex of a prism

    Use one of the following kernels:
    * :func:`choclo.kernel_prism_potential`
    * :func:`choclo.kernel_prism_g_upward`

    Parameters
    ----------
    easting : float
        Easting coordinate of the observation point. Must be in meters.
    northing : float
        Northing coordinate of the observation point. Must be in meters.
    upward : float
        Upward coordinate of the observation point. Must be in meters.
    prism : 1d-array
        One dimensional array containing the coordinates of the prism in the
        following order: ``west``, ``east``, ``south``, ``north``, ``bottom``,
        ``top`` in a Cartesian coordinate system.
        All coordinates should be in meters.
    kernel : callable
        Kernel function that will be evaluated on each one of the vertices of
        the prism.

    Returns
    -------
    result : float
        Evaluation of the kernel function on each one of the vertices of the
        prism.

    Notes
    -----
    This function evaluates a numerical kernel :math:`k(x, y, z)` on each one
    of the vertices of the prism:

    .. math::

        v(\mathbf{p}) =
            \lVert \lVert \lVert
            k(x, y, z)
            \lVert\limits_{x_1}^{x_2}
            \lVert\limits_{y_1}^{y_2}
            \lVert\limits_{z_1}^{z_2}

    where :math:`x_1`, :math:`x_2`, :math:`y_1`, :math:`y_2`, :math:`z_1` and
    :math:`z_2` are boundaries of the rectangular prism in the *shifted
    coordinates* defined by the Cartesian coordinate system with its origin
    located on the observation point :math:`\mathbf{p}`.

    References
    ----------
    - [Nagy2000]_
    - [Nagy2002]_
    - [Fukushima2020]_
    """
    # Initialize result float to zero
    result = 0
    # Iterate over the vertices of the prism
    for i in range(2):
        # Compute shifted easting coordinate
        shift_east = prism[1 - i] - easting
        for j in range(2):
            # Compute shifted northing coordinate
            shift_north = prism[3 - j] - northing
            for k in range(2):
                # Compute shifted upward coordinate
                shift_upward = prism[5 - k] - upward
                # If i, j or k is 1, the corresponding shifted
                # coordinate will refer to the lower boundary,
                # meaning the corresponding term should have a minus
                # sign.
                result += (-1) ** (i + j + k) * kernel(
                    shift_east, shift_north, shift_upward
                )
    return result


@jit(nopython=True)
def kernel_prism_potential(easting, northing, upward):
    r"""
    Kernel for the potential field due to a rectangular prism

    Evaluates the numerical integration kernel for the potential field
    generated by a prism [Nagy2000] on a single vertex of the prism. The
    coordinates that must be passed are shifted coordinates: the coordinates of
    the vertex from a Cartesian coordinate system whose origin is located in
    the observation point.

    This function makes use of a safe natural logarithmic function and a safe
    arctangent function [Fukushima2020]_ that guarantee a good accuracy on
    every observation point.

    Parameters
    ----------
    easting : float
        Shifted easting coordinate of the vertex of the prism
    northing : float
        Shifted northing coordinate of the vertex of the prism
    upward : float
        Shifted upward coordinate of the vertex of the prism

    Returns
    -------
    kernel : float
        Value of the numerical kernel function for the potential field due to
        a rectangular prism evaluated on a single vertex.

    Notes
    -----
    Computes the following numerical kernel on the passed *shifted
    coordinates*:

    .. math::

            k_V(x, y, z) &=
                x y \, \text{ln2} (z + r)
                + y z \, \text{ln2} (x + r)
                + z x \, \text{ln2} (y + r) \\
                & - \frac{x^2}{2} \text{arctan2} \left( \frac{yz}{xr} \right)
                - \frac{y^2}{2} \text{arctan2} \left( \frac{zx}{yr} \right)
                - \frac{z^2}{2} \text{arctan2} \left( \frac{xy}{zr} \right)

    where

    .. math::

        \text{ln2}(x) =
        \begin{cases}
            0 & |x| < 10^{-10} \\
            \ln (x)
        \end{cases}

    and

    .. math::

        \text{arctan2} \left( \frac{y}{x} \right) =
        \begin{cases}
            \text{arctan}\left( \frac{y}{x} \right) & x \ne 0 \\
            \frac{\pi}{2} & x = 0 \quad \text{and} \quad y > 0 \\
            -\frac{\pi}{2} & x = 0 \quad \text{and} \quad y < 0 \\
            0 & x = 0 \quad \text{and} \quad y = 0 \\
        \end{cases}

    References
    ----------
    - [Nagy2000]_
    - [Nagy2002]_
    - [Fukushima2020]_
    """
    radius = np.sqrt(easting**2 + northing**2 + upward**2)
    kernel = (
        easting * northing * _safe_log(upward + radius)
        + northing * upward * _safe_log(easting + radius)
        + easting * upward * _safe_log(northing + radius)
        - 0.5 * easting**2 * _safe_atan2(upward * northing, easting * radius)
        - 0.5 * northing**2 * _safe_atan2(upward * easting, northing * radius)
        - 0.5 * upward**2 * _safe_atan2(easting * northing, upward * radius)
    )
    return kernel


@jit(nopython=True)
def kernel_prism_g_upward(easting, northing, upward):
    r"""
    Kernel for upward component of the gradient due to a rectangular prism

    Evaluates the numerical integration kernel for the upward component of the
    gradient of the potential field generated by a prism [Nagy2000] on a single
    vertex of the prism. The coordinates that must be passed are shifted
    coordinates: the coordinates of the vertex from a Cartesian coordinate
    system whose origin is located in the observation point.

    This function makes use of a safe natural logarithmic function and a safe
    arctangent function [Fukushima2020]_ that guarantee a good accuracy on
    every observation point.

    Parameters
    ----------
    easting : float
        Shifted easting coordinate of the vertex of the prism
    northing : float
        Shifted northing coordinate of the vertex of the prism
    upward : float
        Shifted upward coordinate of the vertex of the prism

    Returns
    -------
    kernel : float
        Value of the numerical kernel function for the upward component of the
        gradient of the potential field due to a rectangular prism evaluated on
        a single vertex.

    Notes
    -----
    Computes the following numerical kernel on the passed *shifted
    coordinates*:

    .. math::

        k_{g_z}(x, y, z) = - \left[
            x \, \text{ln2} (y + r)
            + y \, \text{ln2} (x + r)
            - z \, \text{arctan2} \left( \frac{xy}{zr} \right)
            \right]

    .. important::

        In the previous equation a minus sign has been added to the one
        obtained by [Nagy2000]_ in order to compute the numerical kernel for
        the **upward** component instead for the downward one.

    where

    .. math::

        \text{ln2}(x) =
        \begin{cases}
            0 & |x| < 10^{-10} \\
            \ln (x)
        \end{cases}

    and

    .. math::

        \text{arctan2} \left( \frac{y}{x} \right) =
        \begin{cases}
            \text{arctan}\left( \frac{y}{x} \right) & x \ne 0 \\
            \frac{\pi}{2} & x = 0 \quad \text{and} \quad y > 0 \\
            -\frac{\pi}{2} & x = 0 \quad \text{and} \quad y < 0 \\
            0 & x = 0 \quad \text{and} \quad y = 0 \\
        \end{cases}

    References
    ----------
    - [Nagy2000]_
    - [Nagy2002]_
    - [Fukushima2020]_
    """
    radius = np.sqrt(easting**2 + northing**2 + upward**2)
    # The minus sign is to return the kernel for the upward component instead
    # of the downward one.
    kernel = -(
        easting * _safe_log(northing + radius)
        + northing * _safe_log(easting + radius)
        - upward * _safe_atan2(easting * northing, upward * radius)
    )
    return kernel


@jit(nopython=True)
def _safe_atan2(y, x):
    r"""
    Principal value of the arctangent expressed as a two variable function

    This modification has to be made to the arctangent function so the
    gravitational field of the prism satisfies the Poisson's equation.
    Therefore, it guarantees that the fields satisfies the symmetry properties
    of the prism. This modified function has been defined according to
    [Fukushima2020]_.

    Notes
    -----

    .. math::

        \text{arctan2} \left( \frac{y}{x} \right) =
        \begin{cases}
            \text{arctan}\left( \frac{y}{x} \right) & x \ne 0 \\
            \frac{\pi}{2} & x = 0 \quad \text{and} \quad y > 0 \\
            -\frac{\pi}{2} & x = 0 \quad \text{and} \quad y < 0 \\
            0 & x = 0 \quad \text{and} \quad y = 0 \\
        \end{cases}

    References
    ----------
    - [Fukushima2020]_
    """
    if x != 0:
        result = np.arctan(y / x)
    else:
        if y > 0:
            result = np.pi / 2
        elif y < 0:
            result = -np.pi / 2
        else:
            result = 0
    return result


@jit(nopython=True)
def _safe_log(x):
    r"""
    Modified log to return zero for values of x close to zero

    This modified version of the log function makes the computations to agree
    with the limits of the integral (see [Nagy2000]_).

    Notes
    -----

    .. math::

        \text{ln2}(x) =
        \begin{cases}
            0 & |x| < 10^{-10} \\
            \ln (x)
        \end{cases}

    References
    ----------
    - [Nagy2000]_
    """
    if np.abs(x) < 1e-10:
        result = 0
    else:
        result = np.log(x)
    return result
