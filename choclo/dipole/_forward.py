import numpy as np
from numba import jit

from ..constants import VACUUM_MAGNETIC_PERMEABILITY


@jit(nopython=True)
def magnetic_field(
    easting_p, northing_p, upward_p, easting_q, northing_q, upward_q, magnetic_moment
):
    r"""
    Magnetic field due to a dipole

    Returns the three components of the magnetic field due to a single dipole
    a single computation point

    Parameters
    ----------
    easting_p : float
        Easting coordinate of the observation point in meters.
    northing_p : float
        Northing coordinate of the observation point in meters.
    upward_p : float
        Upward coordinate of the observation point in meters.
    easting_q : float
        Easting coordinate of the dipole in meters.
    northing_q : float
        Northing coordinate of the dipole in meters.
    upward_q : float
        Upward coordinate of the dipole in meters.
    magnetic_moment : 1d-array
        Magnetic moment of the dipole. It should have three components in the
        following order: ``mag_moment_easting``, ``mag_moment_northing``,
        ``mag_moment_upward``. Should be in :math:`A m^2`.

    Returns
    -------
    b : array
        Array containing the three components of the magnetic field generated
        by the dipole on the observation point in :math:`\text{T}`.
        The components are returned in the following order: ``b_e``, ``b_n``,
        ``b_u``.

    Notes
    -----
    Returns the three components of the magnetic field
    :math:`\mathbf{B}` on the observation point
    :math:`\mathbf{p} = (x_p, y_p, z_p)` generated by a single dipole located
    in :math:`\mathbf{q} = (x_q, y_q, z_q)` and magnetic moment
    :math:`\mathbf{m}=(m_x, m_y, m_z)`.

    .. math::

        \mathbf{B}(\mathbf{p}) =
            \frac{\mu_0}{4\pi}
            \left[
            \frac{
                3 (\mathbf{m} \dot \mathbf{r}) \mathbf{r}
            }{
                \lVert r \rVert^5
            }
            -
            \frac{
                \mathbf{m}
            }{
                \lVert r \rVert^3
            }
            \right]

    where :math:`\mathbf{r} = \mathbf{p} - \mathbf{q}`,
    :math:`\lVert \cdot \rVert` refer to the :math:`L_2` norm
    and :math:`\mu_0` is the vacuum magnetic permeability.
    """
    r_vector = np.array(
        (
            easting_p - easting_q,
            northing_p - northing_q,
            upward_p - upward_q,
        )
    )
    distance = np.sqrt(np.sum(r_vector**2))
    dotproduct = (
        magnetic_moment[0] * r_vector[0]
        + magnetic_moment[1] * r_vector[1]
        + magnetic_moment[2] * r_vector[2]
    )
    result = 3 * dotproduct * r_vector / distance**5 - magnetic_moment / distance**3
    return VACUUM_MAGNETIC_PERMEABILITY / 4 / np.pi * result


@jit(nopython=True)
def magnetic_e(
    easting_p, northing_p, upward_p, easting_q, northing_q, upward_q, magnetic_moment
):
    r"""
    Easting component of the magnetic field due to a dipole

    Returns the easting component of the magnetic field by a single dipole on
    a single computation point

    Parameters
    ----------
    easting_p : float
        Easting coordinate of the observation point in meters.
    northing_p : float
        Northing coordinate of the observation point in meters.
    upward_p : float
        Upward coordinate of the observation point in meters.
    easting_q : float
        Easting coordinate of the dipole in meters.
    northing_q : float
        Northing coordinate of the dipole in meters.
    upward_q : float
        Upward coordinate of the dipole in meters.
    magnetic_moment : 1d-array
        Magnetic moment of the dipole. It should have three components in the
        following order: ``mag_moment_easting``, ``mag_moment_northing``,
        ``mag_moment_upward``. Should be in :math:`A m^2`.

    Returns
    -------
    b_e : float
        Easting component of the magnetic field generated by the dipole
        on the observation point in :math:`\text{T}`.

    Notes
    -----
    Returns the easting component :math:`b_x(\mathbf{p})` of the magnetic field
    :math:`\mathbf{B}` on the observation point
    :math:`\mathbf{p} = (x_p, y_p, z_p)` generated by a single dipole located
    in :math:`\mathbf{q} = (x_q, y_q, z_q)` and magnetic moment
    :math:`\mathbf{m}=(m_x, m_y, m_z)`.

    .. math::

        B_x(\mathbf{p}) =
            \frac{\mu_0}{4\pi}
            \left[
            \frac{
                3 x (\mathbf{m} \dot \mathbf{r})
            }{
                \lVert r \rVert^5
            }
            -
            \frac{
                m_x
            }{
                \lVert r \rVert^3
            }
            \right]

    where :math:`\mathbf{r} = \mathbf{p} - \mathbf{q}`,
    :math:`\lVert \cdot \rVert` refer to the :math:`L_2` norm
    and :math:`\mu_0` is the vacuum magnetic permeability.
    """
    r_vector = np.array(
        (
            easting_p - easting_q,
            northing_p - northing_q,
            upward_p - upward_q,
        )
    )
    distance = np.sqrt(np.sum(r_vector**2))
    dotproduct = (
        magnetic_moment[0] * r_vector[0]
        + magnetic_moment[1] * r_vector[1]
        + magnetic_moment[2] * r_vector[2]
    )
    result = (
        3 * dotproduct * r_vector[0] / distance**5
        - magnetic_moment[0] / distance**3
    )
    return VACUUM_MAGNETIC_PERMEABILITY / 4 / np.pi * result


@jit(nopython=True)
def magnetic_n(
    easting_p, northing_p, upward_p, easting_q, northing_q, upward_q, magnetic_moment
):
    r"""
    Northing component of the magnetic field due to a dipole

    Returns the northing component of the magnetic field by a single dipole on
    a single computation point

    Parameters
    ----------
    easting_p : float
        Easting coordinate of the observation point in meters.
    northing_p : float
        Northing coordinate of the observation point in meters.
    upward_p : float
        Upward coordinate of the observation point in meters.
    easting_q : float
        Easting coordinate of the dipole in meters.
    northing_q : float
        Northing coordinate of the dipole in meters.
    upward_q : float
        Upward coordinate of the dipole in meters.
    magnetic_moment : 1d-array
        Magnetic moment of the dipole. It should have three components in the
        following order: ``mag_moment_easting``, ``mag_moment_northing``,
        ``mag_moment_upward``. Should be in :math:`A m^2`.

    Returns
    -------
    b_n : float
        Northing component of the magnetic field generated by the dipole on the
        observation point in :math:`\text{T}`.

    Notes
    -----
    Returns the northing component :math:`b_y(\mathbf{p})` of the magnetic
    field :math:`\mathbf{B}` on the observation point
    :math:`\mathbf{p} = (x_p, y_p, z_p)` generated by a single dipole located
    in :math:`\mathbf{q} = (x_q, y_q, z_q)` and magnetic moment
    :math:`\mathbf{m}=(m_x, m_y, m_z)`.

    .. math::

        B_y(\mathbf{p}) =
            \frac{\mu_0}{4\pi}
            \left[
            \frac{
                3 y (\mathbf{m} \dot \mathbf{r})
            }{
                \lVert r \rVert^5
            }
            -
            \frac{
                m_y
            }{
                \lVert r \rVert^3
            }
            \right]

    where :math:`\mathbf{r} = \mathbf{p} - \mathbf{q}`,
    :math:`\lVert \cdot \rVert` refer to the :math:`L_2` norm
    and :math:`\mu_0` is the vacuum magnetic permeability.
    """
    r_vector = np.array(
        (
            easting_p - easting_q,
            northing_p - northing_q,
            upward_p - upward_q,
        )
    )
    distance = np.sqrt(np.sum(r_vector**2))
    dotproduct = (
        magnetic_moment[0] * r_vector[0]
        + magnetic_moment[1] * r_vector[1]
        + magnetic_moment[2] * r_vector[2]
    )
    result = (
        3 * dotproduct * r_vector[1] / distance**5
        - magnetic_moment[1] / distance**3
    )
    return VACUUM_MAGNETIC_PERMEABILITY / 4 / np.pi * result


@jit(nopython=True)
def magnetic_u(
    easting_p, northing_p, upward_p, easting_q, northing_q, upward_q, magnetic_moment
):
    r"""
    Upward component of the magnetic field due to a dipole

    Returns the upward component of the magnetic field by a single dipole on
    a single computation point

    Parameters
    ----------
    easting_p : float
        Easting coordinate of the observation point in meters.
    northing_p : float
        Northing coordinate of the observation point in meters.
    upward_p : float
        Upward coordinate of the observation point in meters.
    easting_q : float
        Easting coordinate of the dipole in meters.
    northing_q : float
        Northing coordinate of the dipole in meters.
    upward_q : float
        Upward coordinate of the dipole in meters.
    magnetic_moment : 1d-array
        Magnetic moment of the dipole. It should have three components in the
        following order: ``mag_moment_easting``, ``mag_moment_northing``,
        ``mag_moment_upward``. Should be in :math:`A m^2`.

    Returns
    -------
    b_u : float
        Upward component of the magnetic field generated by the dipole on the
        observation point in :math:`\text{T}`.

    Notes
    -----
    Returns the upward component :math:`b_z(\mathbf{p})` of the magnetic
    field :math:`\mathbf{B}` on the observation point
    :math:`\mathbf{p} = (x_p, y_p, z_p)` generated by a single dipole located
    in :math:`\mathbf{q} = (x_q, y_q, z_q)` and magnetic moment
    :math:`\mathbf{m}=(m_x, m_y, m_z)`.

    .. math::

        B_z(\mathbf{p}) =
            \frac{\mu_0}{4\pi}
            \left[
            \frac{
                3 (\mathbf{m} \dot \mathbf{r}) z
            }{
                \lVert r \rVert^5
            }
            -
            \frac{
                m_z
            }{
                \lVert r \rVert^3
            }
            \right]

    where :math:`\mathbf{r} = \mathbf{p} - \mathbf{q}`,
    :math:`\lVert \cdot \rVert` refer to the :math:`L_2` norm
    and :math:`\mu_0` is the vacuum magnetic permeability.
    """
    r_vector = np.array(
        (
            easting_p - easting_q,
            northing_p - northing_q,
            upward_p - upward_q,
        )
    )
    distance = np.sqrt(np.sum(r_vector**2))
    dotproduct = (
        magnetic_moment[0] * r_vector[0]
        + magnetic_moment[1] * r_vector[1]
        + magnetic_moment[2] * r_vector[2]
    )
    result = (
        3 * dotproduct * r_vector[2] / distance**5
        - magnetic_moment[2] / distance**3
    )
    return VACUUM_MAGNETIC_PERMEABILITY / 4 / np.pi * result
